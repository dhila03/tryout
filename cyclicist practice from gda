#upload your datasets
q1_2019 <- read.csv("Divvy_Trips_2019_Q1.csv")
q1_2020 <- read.csv("Divvy_Trips_2020_Q1.csv")

#install the packages needed
library(tidyverse)
library(conflicted)

#setting dplyr filter and dplyr lag as the default choices
conflict_prefer("filter","dplyr")
conflict_prefer("lag","dplyr")

#compare column names each of the files
colnames(q1_2019)
colnames(q1_2020)
#they have some different column names...
#we have to rename them to be consistent!
(q1_2019 <- rename(q1_2019,
                  ride_id = trip_id,
                  rideable_type = bikeid,
                  started_at = start_time,
                  ended_at = end_time,
                  start_station_name = from_station_name,
                  start_station_id = from_station_id,
                  end_station_name = to_station_name,
                  end_station_id = to_station_id,
                  member_casual = usertype))

#inspect the new dataframes
str(q1_2019)
str(q1_2020)
#they seem to have matching column names now :)

#convert ride_id and rideable_type to character so they can stack correctly
q1_2019 <- mutate(q1_2019, ride_id = as.character(ride_id),
                  rideable_type = as.character(rideable_type))

#stack individual quarter's data frames into one big data frame
all_trips <- bind_rows(q1_2019, q1_2020)

#remove lat, long, birthyear, and gender fields as this data was dropped beginning in 2020
all_trips <- all_trips %>% 
  select(-c(start_lat, start_lng, end_lat, end_lng, birthyear, gender, "tripduration"))

#inspect the new data table that has been created
colnames(all_trips) #list of column names
nrow(all_trips) #how many rows are in data frame?
dim(all_trips) #dimensions of the data frame
head(all_trips) #see the first six rows of data frame
str(all_trips) #see list of coluns and data types
summary(all_trips) #statistical summary of data

#there are a few problems to fix:
#(1) in the "member_casual" column, there are two names for members; member and subscribers, and two names for casual riders; customer and casual
#(2) data can only be aggregated at the ride level, will want to add additional column to provide opportunities to aggregate the data
#(3) want to add a calculated field for length of ride since the 2020q1 does not contain tripduration, will add "ride_length" for entire dataframe
#(4) some tripdurations show as negative, will delete these

#in the "member_casual" column, replace subscriber with member and customer with casual
#make the dataframe consistent, by first seeing how many observations fall under each usertype
table(all_trips$member_casual)

#reassign to the desired values (going with the 2020 labels)
all_trips <- all_trips %>% 
  mutate(member_casual = recode(member_casual,
                                "Subscriber" = "member",
                                "Customer" = "casual"))

#check the reassignment
table(all_trips$member_casual)


#add columns listing the date, month, day, and year of each ride
#this will allow us to aggregate the data
all_trips$date <- as.Date (all_trips$started_at) #the default format is yyyy-mm-dd
all_trips$month <- format(as.Date(all_trips$date),"%m")
all_trips$day <- format(as.Date(all_trips$date),"%d")
all_trips$year <- format(as.Date(all_trips$date),"%Y")
all_trips$day_of_week <- format(as.Date(all_trips$date),"%A")

#add a "ride_length" calculation to all_trips (in seconds)
all_trips$ride_length <- difftime(all_trips$ended_at, all_trips$started_at)

#inspect the structure of the columns
str(all_trips)

#convert "ride_length" from factor to numeric to run calculations on data
is.factor(all_trips$ride_length)
all_trips$ride_length <- as.numeric(as.character(all_trips$ride_length))
is.numeric(all_trips$ride_length)

#remove the "bad" data
#since there are a few negative entries in ride_length, create a new version
all_trips_v2 <- all_trips[!(all_trips$start_station_name=="HQ QR"| all_trips$ride_length<0),]


#descriptive analysis on ride_length (in seconds)
mean(all_trips_v2$ride_length) #average (total ride length/ rides)
median(all_trips_v2$ride_length)
max(all_trips_v2$ride_length)
min(all_trips_v2$ride_length)

#other alternative to obtain descriptive statistics
summary(all_trips_v2$ride_length)

#compare members and casual user
aggregate(all_trips_v2$ride_length~ all_trips_v2$member_casual, FUN = mean)
aggregate(all_trips_v2$ride_length~ all_trips_v2$member_casual, FUN = median)
aggregate(all_trips_v2$ride_length~ all_trips_v2$member_casual, FUN = max)
aggregate(all_trips_v2$ride_length~ all_trips_v2$member_casual, FUN = min)

#see the average ride time by each day for members vs casual users
aggregate(all_trips_v2$ride_length~all_trips_v2$member_casual+
            all_trips_v2$day_of_week,
          FUN = mean)

#notice that the days of the week are out of order, so let's fix it!
all_trips_v2$day_of_week <- ordered(all_trips_v2$day_of_week,
                                    levels = c("Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"))
#re run the average riding time
aggregate(all_trips_v2$ride_length~all_trips_v2$member_casual+
            all_trips_v2$day_of_week,
          FUN = mean)

#analyse the ridership data by type and weekday
all_trips_v2 %>% 
  mutate(weekday = wday (started_at, label = TRUE)) %>% #creates weekday field using wday()
  group_by(member_casual, weekday) %>% #groups by usertype and weekday
  summarise(number_of_rides = n(), #calculates the number of rides and average duration
            average_duration = mean(ride_length)) %>% #calculates the average duration
  arrange(member_casual, weekday) #sorts the data

#visualise the number of rides by rider type
all_trips_v2 %>% 
  mutate(weekday = wday(started_at, label = TRUE)) %>% 
  group_by(member_casual, weekday) %>% 
  summarise(number_of_rides = n(),
            average_duration = mean(ride_length)) %>% 
  arrange(member_casual, weekday) %>% 
  ggplot(aes(x = weekday, y = number_of_rides, fill = member_casual))+
  geom_col(position = "dodge")

#visualisation for average duration
all_trips_v2 %>% 
  mutate(weekday = wday(started_at, label = TRUE)) %>% 
  group_by(member_casual, weekday) %>% 
  summarise(number_of_rides = n(),
            average_duration = mean(ride_length)) %>% 
  arrange(member_casual, weekday) %>% 
  ggplot(aes(x = weekday, y = average_duration, fill = member_casual))+
  geom_col(position = "dodge")
